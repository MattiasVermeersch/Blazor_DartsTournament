@page "/overview"
@inject IPlayerService playerService
@inject ILegService legService
@inject ITournamentService tournamentService
@inject NavigationManager NavigationManager 
@implements IAsyncDisposable

<PageTitle>Klassement</PageTitle>

@if(timeout)
{
    <Loading Subject="Klassement" />
}
else
{
    <h3>Klassement</h3>

    @if (Tournament.IsActive)
    {
        <div class="row">
            <div class="col-md-6">
                <table class="table shadow">
                    <caption>Algemeen klassement</caption>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Naam</th>
                            <th>Win</th>
                            <th>Verlies</th>
                            <th>Gemiddelde <br /> score</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var player in PlayerList)
                        {
                            <tr>
                                <th scope="row">@Counter</th>
                                <td>@player.PlayerName</td>
                                <td>@player.Wins</td>
                                <td>@player.Losses</td>
                                <td>@player.AverageScore</td>
                            </tr>

                            Counter++;
                        }
                        @{Counter = 1;}
                    </tbody>
                </table>
            </div>
            <div class="col-md-6">
                <table class="table shadow">
                    <caption>Topprestaties</caption>
                    <thead>
                        <tr>
                            <th>Prestatie</th>
                            <th>Naam</th>
                            <th>Aantal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Meeste Treble's</th>
                            <td>@TopTriplePlayer.PlayerName</td>
                            <td>@TopTriplePlayer.NumberOfTrebles</td>
                        </tr>
                        <tr>
                            <th scope="row">Meeste Double's</th>
                            <td>@TopDoublePlayer.PlayerName</td>
                            <td>@TopDoublePlayer.NumberOfDoubles</td>
                        </tr>
                        <tr>
                            <th scope="row">Meeste 180's</th>
                            <td>@TopT20Player.PlayerName</td>
                            <td>@TopT20Player.TypeCountT20</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <h3>Actieve Legs</h3>
        @if(Legs.Any())
        {
            <ActiveLegsCards LegsList=@Legs></ActiveLegsCards>
        }
        else
        {
            <div class="alert alert-info">Er worden op dit moment geen Legs gespeeld.</div>
        }
    }
    else
    {
        <div class="col-md-12">
            <p class="alert alert-info">Het toernooi is nog niet gestart.</p>
        </div>
    }
}

@code {
    private bool timeout = true;

    private Tournament Tournament = new Tournament();
    private IEnumerable<PlayerStatisticsModel> PlayerList;
    private PlayerStatisticsModel TopTriplePlayer;
    private PlayerStatisticsModel TopDoublePlayer;
    private PlayerStatisticsModel TopT20Player;
    private IEnumerable<Leg> Legs;

    private HubConnection hubConnection;

    private int Counter = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetStatistics();

        await SetHubConnection();
        timeout = false;
    }

    private async Task GetStatistics()
    {
        Tournament = await tournamentService.GetByIdAsync(100);
        PlayerList = await playerService.GetPlayerStatisticsAsync();
        TopTriplePlayer = await playerService.GetTopTriplePlayerAsync();
        TopDoublePlayer = await playerService.GetTopDoublePlayerAsync();
        TopT20Player = await playerService.GetTopT20PlayerAsync();
        await GetActiveLegs();
    }

    private async Task GetActiveLegs()
    {
        Legs = await legService.GetActiveLegs();
    }

    private async Task SetHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(BlazorConstants.HubPath))
            .Build();

        hubConnection.On("GetStatistics", async () =>
        {
            await GetStatistics();
            await GetActiveLegs();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    } 
}

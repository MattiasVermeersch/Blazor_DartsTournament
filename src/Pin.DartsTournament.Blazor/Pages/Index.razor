@page "/"

@inject ITournamentService tournamentService
@inject ILegService legService
@inject NavigationManager NavigationManager 
@implements IAsyncDisposable


<center><PageTitle>Darts Toernooi</PageTitle></center>

@if(Tournament == null)
{
    <Loading Subject="Tournament" />
}
else
{
    <BannerWithTitle Model="@Tournament" ImageSrc="/images/darts_banner2.jpg" />
    
    if(newPlayer == null && !Tournament.IsActive)
    {
     <div class="col-12 text-center d-grid">
        <button class="btn btn-success btn-lg" @onclick="StartTournament">Start het toernooi</button>
     </div>

        @if (Players.Any())
        {
            <PlayerTable PlayerList="@Players" OnAddClick="AddPlayer" />
        }
        else
        {
            <div class="col-md-12 text-center">
                <p class="alert alert-info">Er zijn nog geen spelers ingeschreven in dit toernooi.</p>
            </div>
        }
    }

    @if(newPlayer != null)
    {
        <PlayerForm Model="@newPlayer"
            OnSaveClick="AddPlayerToTournament"
            OnBackClick="GetTournament"></PlayerForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-success">
                @message
            </div>
        }
    }

    @if(Tournament.IsActive)
    {
        <MatchCards LegsList="@Legs"
            OnStartMatchClick="StartMatch"/>
    }
}

@code {
    private Tournament Tournament { get; set; }
    private string TournamentDate { get; set; }
    private IEnumerable<Leg> Legs { get; set; }
    private IEnumerable<Player> Players { get; set; }

    private Player newPlayer;
    private string message;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await SetHubConnection();

        await GetTournament();
    }

    private async Task GetTournament()
    {
        this.newPlayer = null;

        try
        {
            Tournament = await tournamentService.GetByIdAsync(100);

            Players = Tournament.Players;

            Legs = Tournament.Legs;
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public void AddPlayer()
    {
        this.newPlayer = new Player();
    }

    public async Task AddPlayerToTournament(Player player)
    {
        try
        {
            player.TournamentId = this.Tournament.Id;
            await tournamentService.AddPlayerToTournament(player);

            this.message = $"{player.Name} werd toegevoegd aan het toernooi.";

            this.newPlayer = new Player();
            StateHasChanged();

            await SendToHub();
            await ClearMessages();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task ClearMessages()
    {
        await Task.Delay(5000);
        this.message = null;
    }

    public async Task StartTournament()
    {
        try
        {
            var id = Tournament.Id;
            await tournamentService.StartTournament(id);

            await GetTournament();
            await SendToHub();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public async Task StartMatch(Leg leg)
    {
        try
        {
            await legService.StartMatch(leg.Id);
            NavigationManager.NavigateTo($"/match/{leg.Id}");
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task SetHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(BlazorConstants.HubPath))
            .Build();

        hubConnection.On("GetTournament", async () =>
        {
            await GetTournament();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task SendToHub()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SendTournament");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    } 
}
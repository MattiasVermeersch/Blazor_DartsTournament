@page "/"

@inject ITournamentService tournamentService
@inject ILegService legService


<center><PageTitle>Darts Toernooi</PageTitle></center>

@if(Tournament == null)
{
    <Loading Subject="Tournament" />
}
else
{
    @if(currentLeg == null)
    {
        <BannerWithTitle Model="@Tournament" ImageSrc="/images/darts_banner2.jpg" />
    }
    
    if(newPlayer == null && !Tournament.IsActive)
    {
     <div class="col-12 text-center">
        <button class="btn btn-primary btn-lg" @onclick="StartTournament">Start het toernooi</button>
     </div>
        
    <PlayerTable PlayerList="@Players" OnAddClick="AddPlayer" />
    }

    @if(newPlayer != null)
    {
        <PlayerForm Model="@newPlayer"
            OnSaveClick="AddPlayerToTournament"
            OnBackClick="GetTournament"></PlayerForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-success">
                @message
            </div>
        }
    }

    @if(Tournament.IsActive && currentLeg == null)
    {
        <MatchCards LegsList="@Legs"
            Counter=0
            OnStartMatchClick="StartMatch"
            OnContinueMatchClick="ContinueMatch"/>
    }

    @if(currentLeg != null)
    {
        <LegDetails Model="@currentLeg" 
            OnBackClick="GetTournament"/> 
    }

}

@code {
    private Tournament Tournament { get; set; }
    private string TournamentDate { get; set; }
    private IEnumerable<Leg> Legs { get; set; }
    private IEnumerable<Player> Players { get; set; }

    private Player newPlayer;
    private Leg currentLeg;
    private string message;

    protected override async Task OnInitializedAsync()
    {
        #if DEBUG
    //await Task.Delay(2000);
        #endif
        await GetTournament();
    }

    public async Task GetTournament()
    {
        this.newPlayer = null;
        this.currentLeg = null;

        try
        {
            Tournament = await tournamentService.GetByIdAsync(100);

            Players = Tournament.Players;

            Legs = Tournament.Legs;
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public void AddPlayer()
    {
        this.newPlayer = new Player();
    }

    public async Task AddPlayerToTournament(Player player)
    {
        try
        {
            player.TournamentId = this.Tournament.Id;
            await tournamentService.AddPlayerToTournament(player);

            this.message = $"{player.Name} werd toegevoegd aan het toernooi.";

            this.newPlayer = new Player();
            StateHasChanged();

            await ClearMessages();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task ClearMessages()
    {
        await Task.Delay(5000);
        this.message = null;
    }

    public async Task StartTournament()
    {
        try
        {
            var id = Tournament.Id;
            await tournamentService.StartTournament(id);

            await GetTournament();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public async Task StartMatch(Leg leg)
    {
        try
        {
            this.currentLeg = await legService.StartMatch(leg.Id);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public async Task ContinueMatch(Leg leg)
    {
        try
        {
            this.currentLeg = await legService.GetByIdAsync(leg.Id);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public async Task AddThrow(string type, int number, long playerId)
    {
        var entity = new Throw();

        entity.Type = type;
        entity.Number = number;

    }
}
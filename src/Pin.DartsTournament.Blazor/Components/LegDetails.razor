@*@page "/match/id"*@

@inject ILegService legService
@inject IPlayerService playerService

<div class="bgground-legdetails">
    <div class="row">
        <div class="col-1">
            <button class="btn btn-primary" @onclick="OnBackClick">&laquo;</button>
        </div>
        <div class="col-10">
            @if(Model.WinnerId != null)
            {
                <h3 class="display-4 text-center">Eindstand</h3>
            }
            else
            {
                <h3 class="display-4 text-center">Match</h3>
            }
            
        </div>
    </div>
    <br />
    
    @if(Model.CurrentlyPlayingId != null)
    {
    <div class="row">
        <div class="col-md-5">
            <div class="row">
                <div class="col-md-5">
                    @if(Player1.Id == Model.CurrentlyPlayingId)
                    {
                        <h3 class="text-center active-player">@Player1.Name</h3>
                    }
                    else 
                    {
                        <h3 class="text-center">@Player1.Name</h3>
                    }
                </div>
                <div class="col-md-2">
                    <h5 class="text-center">vs</h5>
                </div>
                <div class="col-md-5">
                    @if(Player2.Id == Model.CurrentlyPlayingId)
                    {
                        <h3 class="text-center active-player">@Player2.Name</h3>
                    }
                    else 
                    {
                        <h3 class="text-center">@Player2.Name</h3>
                    }
                </div>
            </div>
            <div class="row">
                <br />
            </div>
            <div class="row">
                <div class="col-md-5">
                    <h3 class="text-center">@Model.ScorePlayer1</h3>
                </div>
                <div class="col-md-2">
                    <h3 class=""></h3>
                </div>
                <div class="col-md-5">
                    <h3 class="text-center">@Model.ScorePlayer2</h3>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <h3 class="text-center">Huidige Set</h3>
                    @if(Throws.Count() > 0)
                    {
                        <h4 class="text-center">
                        @foreach(var thrown in Throws)
                        {
                                @if(thrown != Throws.Last())
                                {
                                    <span>@thrown.Type / </span>
                                }
                                else
                                {
                                    <span>@thrown.Type</span>;
                                }
                        }
                        </h4>
                    }
                    else
                    {
                        <h4 class="text-center">0</h4>
                    }
                    @if(Throws.Count() == 3 || (Model.ScorePlayer1 == 0 || Model.ScorePlayer2 == 0))
                    {
                        <div class="row">
                            <div class="col-md-12 text-center">
                                <button class="btn btn-success"
                                    @onclick="SubmitSet">Registreer Set</button> 
                                <button class="btn btn-danger"
                                    @onclick="ResetSet">Reset</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <h3 class="text-center">Worpen</h3>
                    <div class="row">
                        <div class="col-md-6 text-center">
                            <ul class="list-group">
                            @foreach(var set in SetsPlayer1)
                            {
                                <li class="list-group-item">@set.Score <br /> (@set.ThrowTypes)</li>
                            }
                            </ul>
                        </div> 
                        <div class="col-md-6 text-center">
                            <ul class="list-group">
                            @foreach(var set in SetsPlayer2)
                            {
                                <li class="list-group-item">@set.Score <br /> (@set.ThrowTypes)</li>
                            }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="row">
                <div class="col-md-12">
                    <ul class="circle">
                        <li class="slice" @onclick="() => SetThrowValue(20)"><div class="text">20</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(1)"><div class="text">1</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(18)"><div class="text">18</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(4)"><div class="text">4</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(13)"><div class="text">13</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(6)"><div class="text">6</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(10)"><div class="text">10</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(15)"><div class="text">15</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(2)"><div class="text">2</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(17)"><div class="text">17</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(3)"><div class="text">3</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(19)"><div class="text">19</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(7)"><div class="text">7</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(16)"><div class="text">16</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(8)"><div class="text">8</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(11)"><div class="text">11</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(14)"><div class="text">14</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(9)"><div class="text">9</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(12)"><div class="text">12</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(5)"><div class="text">5</div></li>
                    </ul>
                </div>
            </div>
            <br />
            @if (Throws.Count() < 3)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <div class="btn-group d-flex shadow" role="group" aria-label="Toggle Throw Type">
                            <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => SetThrowType('S')">Single</button>

                            <button type="button" class="btn btn-outline-success"
                            @onclick="() => SetThrowType('D')">Double</button>

                            <button type="button" class="btn btn-outline-danger"
                            @onclick="() => SetThrowType('T')">Treble</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <div class="btn-group d-flex shadow">
                            <button class="btn btn-success"
                            @onclick="() => SetThrowType('O')">Outer Bull</button>
                            <button class="btn btn-danger"
                            @onclick="() => SetThrowType('B')">Bulls Eye</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <div class="btn-group d-flex shadow">
                            <button class="btn btn-outline-dark"
                            @onclick="() => SetThrowType('Z')">Nulworp</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <h3 class="text-center">Huidige worp</h3>
                        <h4 class="text-center fw-bolder">@Dart@Value</h4>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12 text-center">
                        <button class="btn btn-primary shadow"
                            @onclick="SubmitThrow">Registreer worp</button>
                        <button class="btn btn-danger shadow"
                            @onclick="ResetSet">Reset</button>
                    </div>
                </div>
            }
        </div>
        </div>
    }
    else if(Model.WinnerId != null)
    {
    <div class="row">
        <div class="col-md-6 text-center">
            <h3>@Player1.Name</h3>
        </div>
        <div class="col-md-6 text-center">
            <h3>@Player2.Name</h3>
        </div>
    </div> 
    <div class="row">
        <div class="col-md-6 text-center">
            <h3>@Model.ScorePlayer1</h3>
        </div>
        <div class="col-md-6 text-center">
            <h3>@Model.ScorePlayer2</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 text-center">
            <ul class="list-group">
            @foreach(var set in SetsPlayer1)
            {
                <li class="list-group-item"><h5>@set.Score <br /> (@set.ThrowTypes)</h5></li>
            }
            </ul>
        </div> 
        <div class="col-md-6 text-center">
            <ul class="list-group">
            @foreach(var set in SetsPlayer2)
            {
                <li class="list-group-item"><h5>@set.Score <br /> (@set.ThrowTypes)</h5></li>
            }
            </ul>
        </div>
    </div>
    <br />
    <div class="row">
        @if(Player1.Id == Model.WinnerId)
        {
            <h3 class="text-center active-player">@Player1.Name heeft gewonnen!</h3>
        }
        @if(Player2.Id == Model.WinnerId)
        {
            <h3 class="text-center active-player">@Player2.Name heeft gewonnen!</h3>
        }
    </div>
    }
    else
    {
    <div class="row">
        <div class="col-md-12 text-center">
            <h3 class="text-center">Selecteer wie eerst mag beginnen</h3>
            <div class="btn-group d-flex shadow">
                <button class="btn btn-primary btn-lg" @onclick="() => SetPlayerTurn(Player1.Id)">@Player1.Name</button>
                <button class="btn btn-primary btn-lg" @onclick="() => SetPlayerTurn(Player2.Id)">@Player2.Name</button>
            </div>
        </div>
    </div>
    }
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="row">
            <p class="alert alert-danger">@error</p>
        </div>
    }
    
</div>

@code {
    [Parameter]
    public Leg Model { get; set; }

    [Parameter]
    public EventCallback OnBackClick { get; set; }

    private string error = null;
    private string Dart = null;
    private int Value = 0;

    private ICollection<Throw> Throws = new List<Throw>();
    private IEnumerable<SetModel> SetsPlayer1 = new List<SetModel>();
    private IEnumerable<SetModel> SetsPlayer2 = new List<SetModel>();

    private Player Player1;
    private Player Player2;

    protected override async Task OnInitializedAsync()
    {
        this.Value = 0;
        this.Dart = null;
        Throws = new List<Throw>();
        SetsPlayer1 = new List<SetModel>();
        SetsPlayer2 = new List<SetModel>();

        await GetPlayersFromLeg();
        await GetSetsFromLeg();
    }

    private async Task GetPlayersFromLeg()
    {
        Player1 = Model.PlayerLegs.First().Player;
        Player2 = Model.PlayerLegs.Last().Player;
        await Task.Delay(0);
    }

    private async Task GetSetsFromLeg()
    {
        this.SetsPlayer1 = await legService.GetSetsFromPlayer(this.Player1, Model.Id);
        this.SetsPlayer2 = await legService.GetSetsFromPlayer(this.Player2, Model.Id);
    }

    private async Task GetLegById(long id)
    {
        try
        {
            this.Model = await legService.GetByIdAsync(id);
            Throws = new List<Throw>();
            await GetPlayersFromLeg();
            await GetSetsFromLeg();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task SetPlayerTurn(long playerId)
    {
        try
        {
            Model.CurrentlyPlayingId = playerId;
            await legService.UpdateAsync(Model);

            await GetLegById(Model.Id);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void SetThrowType(char type)
    {
        if(type == 'B')
        {
            this.Dart = "D";
            this.Value = 25;
        }
        else if(type == 'O')
        {
            this.Dart = "S";
            this.Value = 25;
        }
        else if(type == 'Z')
        {
            this.Dart = "";
            this.Value = 0;
        }
        else
        {
            this.Dart = type.ToString();
        }
    }

    private void SetThrowValue(int number)
    {
        this.Value = number;
    }

    private async Task SubmitThrow()
    {
        try
        {
            var item = new Throw();

            item.Number = await CalculateScore();
            item.Type = await DetermineType(item.Number);

            this.Throws.Add(item);

            this.Dart = null;
            this.Value = 0;
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task<string> DetermineType(int score)
    {
        string type = null;

        if(score == 0)
        {
            type = "0";
        }
        else
        {
            type = $"{this.Dart}{this.Value}";
        }

        if(Model.CurrentlyPlayingId.Equals(Player1.Id))
        {
            Model.ScorePlayer1 = Model.ScorePlayer1 - score;
        }
        else
        {
            Model.ScorePlayer2 = Model.ScorePlayer2 - score;
        }

        return await Task.FromResult(type);
    }

    private Task<int> CalculateScore()
    {
        try
        {
            var originalScore = 0;

            if(Model.CurrentlyPlayingId.Equals(Player1.Id))
            {
                originalScore = Model.ScorePlayer1;
            }
            else
            {
                originalScore = Model.ScorePlayer2;
            }

            var score = 0;

            switch (this.Dart)
            {
                case "S":
                    score = this.Value * 1;
                    break;
                case "D":
                    score = this.Value * 2;
                    break;
                case "T":
                    score = this.Value * 3;
                    break;
                case "":
                    score = 0;
                    break;
            }

            var newScore = originalScore - score;

            if(newScore < 0)
            {
                score = 0;
                error = "De score moet precies nul zijn om uit te spelen.";
            }
            else if(newScore == 0 && !this.Dart.Equals("D"))
            {
                error = "Om uit te spelen moet de laatste worp een Double zijn!";
                score = 0;
            }

            return Task.FromResult(score);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task ResetSet()
    {
        await GetLegById(Model.Id);
        this.Dart = null;
        this.Value = 0;
        this.error = null;
    }

    private async Task SubmitSet()
    {
        try
        {
            await legService.SubmitSet(Throws, Model.Id, Model.CurrentlyPlayingId);

            if(Model.ScorePlayer1 == 0 || Model.ScorePlayer2 == 0)
            {
                await legService.ResolveLeg(Model.CurrentlyPlayingId, Model);

                await DeterminePlayerWinsAndLosses(Player1, Player2);
            }

            await GetLegById(Model.Id);
            this.error = null;
        }
        catch(Exception ex){
            throw new Exception(ex.Message);
        }
    }
    private async Task DeterminePlayerWinsAndLosses(Player player1, Player player2)
    {
        try
        {
            var playersList = new List<Player> { player1, player2 };

            foreach(var player in playersList)
            {
                if(player.Id == Model.CurrentlyPlayingId)
                {
                    await playerService.ResolveLegForPlayerAsync(player.Id, true);
                }
                else
                {
                    await playerService.ResolveLegForPlayerAsync(player.Id, false);
                }
            }
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);

        }
    }
}

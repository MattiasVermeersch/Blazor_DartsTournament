@inject ILegService legService

<div class="bgground-legdetails">
    <div class="row">
        <div class="col-1">
            <button class="btn btn-primary" @onclick="OnBackClick">&laquo;</button>
        </div>
        <div class="col-10">
            <h3 class="display-4 text-center">Match Details</h3>
        </div>
    </div>
    <br />
    
    @if(Model.CurrentlyPlayingId != null)
    {
    <div class="row">
        <div class="col-md-5">
            <div class="row">
                <div class="col-md-5">
                    @if(Player1.Id == Model.CurrentlyPlayingId)
                    {
                        <h3 class="text-center active-player">@Player1.Name</h3>
                    }
                    else 
                    {
                        <h3 class="text-center">@Player1.Name</h3>
                    }
                </div>
                <div class="col-md-2">
                    <h5 class="text-center">vs</h5>
                </div>
                <div class="col-md-5">
                    @if(Player2.Id == Model.CurrentlyPlayingId)
                    {
                        <h3 class="text-center active-player">@Player2.Name</h3>
                    }
                    else 
                    {
                        <h3 class="text-center">@Player2.Name</h3>
                    }
                </div>
            </div>
            <div class="row">
                <br />
            </div>
            <div class="row">
                <div class="col-md-5">
                    <h3 class="text-center">@Model.ScorePlayer1</h3>
                </div>
                <div class="col-md-2">
                    <h3 class=""></h3>
                </div>
                <div class="col-md-5">
                    <h3 class="text-center">@Model.ScorePlayer2</h3>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <h3 class="text-center">Huidige Set</h3>
                    @if(Throws.Count() > 0)
                    {
                        <h4 class="text-center">
                        @foreach(var thrown in Throws)
                        {
                                @if(thrown != Throws.Last())
                                {
                                    <span>@thrown.Type / </span>
                                }
                                else
                                {
                                    <span>@thrown.Type</span>;
                                }
                        }
                        </h4>
                    }
                    else
                    {
                        <h4 class="text-center">0</h4>
                    }
                    @if(Throws.Count() == 3)
                    {
                        <div class="row">
                            <div class="col-md-12 text-center">
                                <button class="btn btn-success"
                                    @onclick="SubmitSet">Registreer Set</button> 
                                <button class="btn btn-danger"
                                    @onclick="ResetSet">Reset</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-12">
                    <hr />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h3 class="text-center">Worpen</h3>
                    <ul>
                        @*@if(Throws.Count() > 0)
                        {
                            @foreach(var thrown in Throws)
                            {
                                <li>@thrown.Number</li>
                            }
                        }*@
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-7">
            <div class="row">
                <div class="col-md-12">
                    <ul class="circle">
                        <li class="slice" @onclick="() => SetThrowValue(20)"><div class="text">20</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(1)"><div class="text">1</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(18)"><div class="text">18</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(4)"><div class="text">4</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(13)"><div class="text">13</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(6)"><div class="text">6</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(10)"><div class="text">10</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(15)"><div class="text">15</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(2)"><div class="text">2</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(17)"><div class="text">17</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(3)"><div class="text">3</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(19)"><div class="text">19</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(7)"><div class="text">7</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(16)"><div class="text">16</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(8)"><div class="text">8</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(11)"><div class="text">11</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(14)"><div class="text">14</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(9)"><div class="text">9</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(12)"><div class="text">12</div></li>
                        <li class="slice" @onclick="() => SetThrowValue(5)"><div class="text">5</div></li>
                    </ul>
                </div>
            </div>
            <br />
            @if (Throws.Count() < 3)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <div class="btn-group d-flex" role="group" aria-label="Toggle Throw Type">
                            <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => SetThrowType('S')">Single</button>

                            <button type="button" class="btn btn-outline-success"
                            @onclick="() => SetThrowType('D')">Double</button>

                            <button type="button" class="btn btn-outline-danger"
                            @onclick="() => SetThrowType('T')">Treble</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <div class="btn-group d-flex">
                            <button class="btn btn-success"
                            @onclick="() => SetThrowType('O')">Outer Bull</button>
                            <button class="btn btn-danger"
                            @onclick="() => SetThrowType('B')">Bulls Eye</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <div class="btn-group d-flex">
                            <button class="btn btn-outline-dark"
                            @onclick="() => SetThrowType('Z')">Nulworp</button>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12">
                        <h3 class="text-center">Huidige worp</h3>
                        <h4 class="text-center">@Dart@Value</h4>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-12 text-center">
                        <button class="btn btn-success"
                            @onclick="SubmitThrow">Registreer worp</button>
                        <button class="btn btn-danger"
                            @onclick="ResetSet">Reset</button>
                    </div>
                </div>
            }
        </div>
    </div>
    }
    else
    {
    <div class="row">
        <div class="col-md-12 text-center">
            <h3 class="text-center">Selecteer wie eerst mag beginnen</h3>
            <div class="btn-group d-flex">
                <button class="btn btn-primary btn-lg" @onclick="() => SetPlayerTurn(Player1.Id)">@Player1.Name</button>
                <button class="btn btn-primary btn-lg" @onclick="() => SetPlayerTurn(Player2.Id)">@Player2.Name</button>
            </div>
        </div>
    </div>
    }
</div>

@code {
    [Parameter]
    public Leg Model { get; set; }

    [Parameter]
    public EventCallback OnBackClick { get; set; }

    private string Dart { get; set; }
    private int? Value { get; set; }
    private List<Throw> Throws { get; set; }
    private int Score { get; set; }
    private List<string> Worpen { get; set; }

    private Player Player1 {  get;  set; }
    private Player Player2 {  get;  set; }

    protected override async Task OnInitializedAsync()
    {
        this.Value = 0;
        this.Dart = null;
        await GetPlayersFromLeg();
    }

    private async Task GetPlayersFromLeg()
    {
        Player1 = Model.PlayerLegs.First().Player;
        Player2 = Model.PlayerLegs.Last().Player;
        Throws = new List<Throw>();
        await Task.Delay(0);
    }

    private async Task GetLegById(long id)
    {
        try
        {
            this.Model = await legService.GetByIdAsync(id);
            await GetPlayersFromLeg();
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private async Task SetPlayerTurn(long playerId)
    {
        try
        {
            Model.CurrentlyPlayingId = playerId;
            await legService.UpdateAsync(Model);

            await GetLegById(Model.Id);
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void SetThrowType(char type)
    {
        if(type == 'B')
        {
            this.Dart = "Bulls Eye";
            this.Value = null;
        }
        else if(type == 'O')
        {
            this.Dart = "S";
            this.Value = 25;
        }
        else if(type == 'Z')
        {
            this.Dart = "0";
            this.Value = null;
        }
        else
        {
            this.Dart = type.ToString();
        }
    }

    private void SetThrowValue(int number)
    {
        this.Value = number;
    }

    private async Task SubmitThrow()
    {
        try
        {
            var item = new Throw();

            var type = $"{this.Dart}{this.Value}";
            var number = 0;

            if (Value == null) number = 0;
            else number = (int)this.Value;
            var score = 0;

            switch (this.Dart)
            {
                case "S":
                    score = number * 1;
                    break;
                case "D":
                    score = number * 2;
                    break;
                case "T":
                    score = number * 3;
                    break;
                case "Bulls Eye":
                    score = 50;
                    break;
                case "S25":
                    score = 25;
                    break;
                case "0":
                    score = 0;
                    break;
            }

            item.Type = type;
            item.Number = score;

            this.Throws.Add(item);

            await Task.Delay(0);

            this.Dart = null;
            this.Value = 0;
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void ResetSet()
    {
        this.Throws = new List<Throw>();
        this.Dart = null;
        this.Value = 0;
    }

    private async Task SubmitSet()
    {
        await legService.SubmitSet(Throws, Model.Id, Model.CurrentlyPlayingId);

        await GetLegById(Model.Id);
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.DartsTournament.Infrastructure.Data;

#nullable disable

namespace Pin.DartsTournament.Infrastructure.Migrations
{
    [DbContext(typeof(DartsDbContext))]
    [Migration("20220104221903_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Dart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("LegId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.ToTable("Darts", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("RefereeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Legs", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Referees", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Dart", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Leg", null)
                        .WithMany("Throws")
                        .HasForeignKey("LegId");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Game", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Referee", null)
                        .WithMany("Games")
                        .HasForeignKey("RefereeId");

                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", null)
                        .WithMany("Games")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Game", null)
                        .WithMany("Legs")
                        .HasForeignKey("GameId");

                    b.HasOne("Pin.DartsTournament.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Player", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId");

                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", null)
                        .WithMany("Players")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", null)
                        .WithMany("Referees")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Game", b =>
                {
                    b.Navigation("Legs");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.Navigation("Throws");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Players");

                    b.Navigation("Referees");
                });
#pragma warning restore 612, 618
        }
    }
}

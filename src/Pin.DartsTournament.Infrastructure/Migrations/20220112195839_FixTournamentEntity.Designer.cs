// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pin.DartsTournament.Infrastructure.Data;

#nullable disable

namespace Pin.DartsTournament.Infrastructure.Migrations
{
    [DbContext(typeof(DartsDbContext))]
    [Migration("20220112195839_FixTournamentEntity")]
    partial class FixTournamentEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("bit");

                    b.Property<long?>("RefereeId")
                        .HasColumnType("bigint");

                    b.Property<int>("ScorePlayer1")
                        .HasColumnType("int");

                    b.Property<int>("ScorePlayer2")
                        .HasColumnType("int");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefereeId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Legs", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Players", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Losses = 0,
                            Name = "Jane Doe",
                            TournamentId = 100L,
                            Wins = 0
                        },
                        new
                        {
                            Id = 2L,
                            Losses = 0,
                            Name = "John Doe",
                            TournamentId = 100L,
                            Wins = 0
                        },
                        new
                        {
                            Id = 3L,
                            Losses = 0,
                            Name = "Harry Potter",
                            TournamentId = 100L,
                            Wins = 0
                        },
                        new
                        {
                            Id = 4L,
                            Losses = 0,
                            Name = "Mr. Anderson",
                            TournamentId = 100L,
                            Wins = 0
                        },
                        new
                        {
                            Id = 5L,
                            Losses = 0,
                            Name = "Pablo Picasso",
                            TournamentId = 100L,
                            Wins = 0
                        },
                        new
                        {
                            Id = 6L,
                            Losses = 0,
                            Name = "Johan Vermeer",
                            TournamentId = 100L,
                            Wins = 0
                        });
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.PlayerLeg", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("LegId")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerId", "LegId");

                    b.HasIndex("LegId");

                    b.ToTable("PlayerLegs", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Referees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 30L,
                            Name = "Lector Deboosere",
                            TournamentId = 100L
                        },
                        new
                        {
                            Id = 31L,
                            Name = "Lector Derdeyn",
                            TournamentId = 100L
                        });
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Set", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("LegId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Sets", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Throw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("LegId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.ToTable("Throws", (string)null);
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            Date = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Conf-IT-uurtjes Toernooi"
                        });
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Referee", null)
                        .WithMany("Games")
                        .HasForeignKey("RefereeId");

                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", "Tournament")
                        .WithMany("Legs")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Player", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", "Tournament")
                        .WithMany("Players")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.PlayerLeg", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Leg", "Leg")
                        .WithMany("PlayerLegs")
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Pin.DartsTournament.Core.Entities.Player", "Player")
                        .WithMany("PlayerLegs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Tournament", "Tournament")
                        .WithMany("Referees")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Set", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Leg", "Leg")
                        .WithMany("Sets")
                        .HasForeignKey("LegId");

                    b.HasOne("Pin.DartsTournament.Core.Entities.Player", "Player")
                        .WithMany("Sets")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Leg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Throw", b =>
                {
                    b.HasOne("Pin.DartsTournament.Core.Entities.Set", "Leg")
                        .WithMany("Throws")
                        .HasForeignKey("LegId");

                    b.Navigation("Leg");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Leg", b =>
                {
                    b.Navigation("PlayerLegs");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Player", b =>
                {
                    b.Navigation("PlayerLegs");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Referee", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Set", b =>
                {
                    b.Navigation("Throws");
                });

            modelBuilder.Entity("Pin.DartsTournament.Core.Entities.Tournament", b =>
                {
                    b.Navigation("Legs");

                    b.Navigation("Players");

                    b.Navigation("Referees");
                });
#pragma warning restore 612, 618
        }
    }
}
